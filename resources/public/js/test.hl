
(def defmacro
  (macro
    [sym args & macro-body]
    (syntax-quote
      (def (unquote sym)
        (macro (unquote args)
          (unquote-splicing macro-body))))))

(defmacro defn [sym args & fn-body]
  (syntax-quote
    (def (unquote sym)
      (fn (unquote args)
        (unquote-splicing fn-body)))))

(defmacro when [predicate & consequent]
  (syntax-quote
    (if (unquote predicate)
      (do (unquote-splicing consequent)))))

(defn f [x & more]
  (let [y 'false]
    (log-obj (when y (log '"~~~~~ TRUE") (log '"again ~~~~" y)))
    (div x)))






