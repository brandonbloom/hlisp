
(def defmacro
  (macro [sym args & body]
    (syntax-quote
      (def (unquote sym)
        (macro (unquote args)
          (unquote-splicing body))))))

(defmacro defn [sym args & body]
  (syntax-quote
    (def (unquote sym)
      (fn (unquote args)
        (unquote-splicing body)))))

(defmacro when [predicate & body]
  (syntax-quote
    (if (unquote predicate)
      (do (unquote-splicing body)))))

(defmacro when-not [predicate & body]
  (syntax-quote
    (if (unquote predicate)
      'nil
      (do (unquote-splicing body)))))

(defn make-radio [init]
  (receiver-e init))

(defn add-radio [radio, elem, val]
  (map-e
    (fn [v] (send-e radio val))
    (clicks-e elem))
  (map-e
    (fn [v]
      (dom-dissoc!        elem '"data-checked")
      (dom-css!           elem '"cursor" '"pointer")
      (dom-remove-class!  elem '"checked"))
    (filter-e (fn [v] (not= v val)) radio))
  (map-e
    (fn [v]
      (dom-assoc!     elem '"data-checked"  '"data-checked")
      (dom-css!       elem '"cursor"        '"default")
      (dom-add-class! elem '"checked"))
    (filter-e (fn [v] (= v val)) radio))
  (send-e radio val)
  elem)

(defn make-deck [init]
  (receiver-e init))

(defn add-deck [deck, elem, val]
  (map-e (fn [v] (dom-toggle! elem (= v val))) deck)
  elem)

(defn make-tabs [init]
  (make-radio init))

(defn add-tab [tabs trig cont val]
  (let [t (add-radio tabs trig val)
        c (add-deck tabs cont val)]
    (list t c)))

